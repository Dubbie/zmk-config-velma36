#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        timeless_mt_left: timeless_mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_MT_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <35 34 33 32 31 30 29 28 27 26 25 15 5 6 16 7 17 8 18 9 19>;
            hold-trigger-on-release;
        };

        timeless_mt_right: timeless_mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_MT_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <35 34 33 32 31 30 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                         &kp W                         &kp F                      &kp P                           &kp B            &kp J       &kp L                            &kp U                       &kp Z                           &kp SQT
&timeless_mt_left LEFT_GUI A  &timeless_mt_left LEFT_ALT R  &timeless_mt_left LCTRL S  &timeless_mt_left LEFT_SHIFT T  &kp G            &kp M       &timeless_mt_right LEFT_SHIFT N  &timeless_mt_right LCTRL E  &timeless_mt_right RIGHT_ALT I  &timeless_mt_right RIGHT_GUI O
&kp Y                         &kp X                         &kp C                      &kp D                           &kp V            &kp K       &kp H                            &mo 3                       &mo 4                           &kp SEMICOLON
&mt LCTRL TAB                 &lt 1 SPACE                   &kp LEFT_SHIFT             &kp ENTER                       &lt 2 BACKSPACE  &kp ESCAPE
            >;
        };

        Navigation {
            bindings = <
&trans        &trans        &trans     &trans          &trans     &trans   &trans          &trans    &trans  &trans
&sk LEFT_GUI  &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &trans     &trans   &kp LEFT_ARROW  &kp DOWN  &kp UP  &kp RIGHT
&kp LC(Y)     &kp LC(X)     &kp LC(C)  &kp LC(D)       &kp LC(V)  &trans   &kp HOME        &trans    &trans  &kp END
&trans        &trans        &trans     &kp DEL         &kp BSPC   &kp ESC
            >;
        };

        Numbers {
            bindings = <
&kp F10  &kp F7     &kp F8   &kp F9  &kp PRINTSCREEN  &kp FSLH       &kp N7  &kp N8  &kp N9  &kp BSPC
&kp F11  &kp F4     &kp F5   &kp F6  &trans           &kp LS(POUND)  &kp N4  &kp N5  &kp N6  &kp DOT
&kp F12  &kp F1     &kp F2   &kp F3  &trans           &kp GRAVE      &kp N1  &kp N2  &kp N3  &kp COMMA
&kp TAB  &kp SPACE  &kp RET  &trans  &trans           &trans
            >;
        };

        Symbols {
            bindings = <
&kp RA(Z)                 &kp RA(N)          &kp RA(G)   &kp LS(LPAR)  &kp RA(Q)      &kp RA(NUMBER_1)  &kp RA(NUMBER_3)  &trans  &trans         &kp RA(V)
&kp RA(NON_US_BACKSLASH)  &kp RA(B)          &kp RA(F)   &kp LS(STAR)  &kp LS(CARET)  &kp LS(PRCNT)     &kp RA(SLASH)     &trans  &kp LS(GT)     &kp RA(COMMA)
&kp RA(X)                 &kp RA(SEMICOLON)  &kp LS(LT)  &kp LS(DLLR)  &kp RA(W)      &kp RA(C)         &kp LS(N7)        &trans  &kp LS(POUND)  &kp RA(N7)
&kp LS(MINUS)             &kp LS(EXCL)       &kp LS(AT)  &kp DOT       &kp COMMA      &kp SLASH
            >;
        };

        Misc {
            bindings = <
&trans                &kp BSLH  &kp MINUS  &kp RBKT   &trans  &trans  &trans  &trans  &trans  &bootloader
&kp NON_US_BACKSLASH  &kp LBKT  &kp N0     &kp EQUAL  &trans  &trans  &trans  &trans  &trans  &trans
&trans                &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans  &sys_reset
&trans                &trans    &trans     &trans     &trans  &trans
            >;
        };
    };
};
